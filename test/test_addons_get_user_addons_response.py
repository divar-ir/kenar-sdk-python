# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kenar_api_client.models.addons_get_user_addons_response import AddonsGetUserAddonsResponse

class TestAddonsGetUserAddonsResponse(unittest.TestCase):
    """AddonsGetUserAddonsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddonsGetUserAddonsResponse:
        """Test AddonsGetUserAddonsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddonsGetUserAddonsResponse`
        """
        model = AddonsGetUserAddonsResponse()
        if include_optional:
            return AddonsGetUserAddonsResponse(
                addons = [
                    kenar_api_client.models.addons_user_addon.addonsUserAddon(
                        divar_user_id = '', 
                        filters = kenar_api_client.models.addons_user_addon_filters.addonsUserAddonFilters(
                            categories = [
                                ''
                                ], ), 
                        meta_data = kenar_api_client.models.addons_addon_meta_data.addonsAddonMetaData(
                            app = kenar_api_client.models.apps_app.appsApp(
                                avatar = '', 
                                display = '', 
                                divar_identification_key = '', 
                                service_tags = [
                                    'VERIFIED'
                                    ], 
                                service_type = 'FUNC_CLICK_AND_COLLECT', 
                                slug = '', 
                                status = kenar_api_client.models.apps_app_status.appsAppStatus(), ), 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            id = '', 
                            last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            service_tags = [
                                'VERIFIED'
                                ], 
                            status = 'ACTIVE', ), 
                        phone = '', 
                        semantic = {
                            'key' : ''
                            }, 
                        semantic_data = kenar_api_client.models.addons_addon_semantic.addonsAddonSemantic(
                            car_verification_failure_reason = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                            car_verification_last_successful_stage = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                            identity_verification_failure_reason = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                            identity_verification_last_successful_stage = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                            identity_verification_result = 'FACE_AND_ID_MATCHED', 
                            inspection_result = 'INSPECTION_APPROVED', 
                            new_face_verification_result = 'NEW_FACE_VERIFICATION_FAILED', 
                            ownership_result = 'OWNERSHIP_CONFIRMED', 
                            payment_method = 'SECURE', 
                            post_verification_result = 'POST_INFORMATION_MATCHED', ), 
                        sensitive_semantic = {
                            'key' : ''
                            }, 
                        widgets = kenar_api_client.models.widgets.widgets(), 
                        widgets_semantic = kenar_api_client.models.widgets_semantic.widgets_semantic(), )
                    ]
            )
        else:
            return AddonsGetUserAddonsResponse(
        )
        """

    def testAddonsGetUserAddonsResponse(self):
        """Test AddonsGetUserAddonsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kenar_api_client.models.addons_user_addon import AddonsUserAddon

class TestAddonsUserAddon(unittest.TestCase):
    """AddonsUserAddon unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddonsUserAddon:
        """Test AddonsUserAddon
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddonsUserAddon`
        """
        model = AddonsUserAddon()
        if include_optional:
            return AddonsUserAddon(
                meta_data = kenar_api_client.models.addons_addon_meta_data.addonsAddonMetaData(
                    id = '', 
                    app = kenar_api_client.models.apps_app.appsApp(
                        slug = '', 
                        display = '', 
                        avatar = '', 
                        divar_identification_key = '', 
                        status = kenar_api_client.models.apps_app_status.appsAppStatus(), 
                        service_type = 'FUNC_CLICK_AND_COLLECT', 
                        service_tags = [
                            'VERIFIED'
                            ], ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'ACTIVE', 
                    service_tags = [
                        'VERIFIED'
                        ], ),
                phone = '',
                divar_user_id = '',
                widgets = kenar_api_client.models.widgets.widgets(),
                semantic = {
                    'key' : ''
                    },
                semantic_data = kenar_api_client.models.addons_addon_semantic.addonsAddonSemantic(
                    payment_method = 'SECURE', 
                    identity_verification_result = 'FACE_AND_ID_MATCHED', 
                    post_verification_result = 'POST_INFORMATION_MATCHED', 
                    status = 'SUCCEEDED', 
                    identity_verification_last_successful_stage = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                    identity_verification_failure_reason = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                    car_verification_last_successful_stage = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                    car_verification_failure_reason = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                    ownership_result = 'OWNERSHIP_CONFIRMED', 
                    inspection_result = 'INSPECTION_APPROVED', 
                    new_face_verification_result = 'NEW_FACE_VERIFICATION_FAILED', ),
                sensitive_semantic = {
                    'key' : ''
                    },
                widgets_semantic = kenar_api_client.models.widgets_semantic.widgets_semantic(),
                filters = kenar_api_client.models.addons_user_addon_filters.addonsUserAddonFilters(
                    categories = [
                        ''
                        ], )
            )
        else:
            return AddonsUserAddon(
        )
        """

    def testAddonsUserAddon(self):
        """Test AddonsUserAddon"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

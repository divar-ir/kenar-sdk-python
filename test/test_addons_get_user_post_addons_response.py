# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kenar_api_client.models.addons_get_user_post_addons_response import AddonsGetUserPostAddonsResponse

class TestAddonsGetUserPostAddonsResponse(unittest.TestCase):
    """AddonsGetUserPostAddonsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddonsGetUserPostAddonsResponse:
        """Test AddonsGetUserPostAddonsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddonsGetUserPostAddonsResponse`
        """
        model = AddonsGetUserPostAddonsResponse()
        if include_optional:
            return AddonsGetUserPostAddonsResponse(
                addons = [
                    kenar_api_client.models.addons_post_addon.addonsPostAddon(
                        meta_data = kenar_api_client.models.addons_addon_meta_data.addonsAddonMetaData(
                            id = '', 
                            app = kenar_api_client.models.apps_app.appsApp(
                                slug = '', 
                                display = '', 
                                avatar = '', 
                                divar_identification_key = '', 
                                status = kenar_api_client.models.apps_app_status.appsAppStatus(), 
                                service_type = 'FUNC_CLICK_AND_COLLECT', 
                                service_tags = [
                                    'VERIFIED'
                                    ], ), 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'ACTIVE', 
                            service_tags = [
                                'VERIFIED'
                                ], ), 
                        token = '', 
                        app = kenar_api_client.models.apps_app.appsApp(
                            slug = '', 
                            display = '', 
                            avatar = '', 
                            divar_identification_key = '', ), 
                        widgets = kenar_api_client.models.widgets.widgets(), 
                        score = '', 
                        selector = kenar_api_client.models.(and)_post_is_selected_by_this_selector_if_all_of_the_following_conditions
matches.(AND) post is selected by this selector if all of the following conditions
matches(
                            tokens = [
                                ''
                                ], 
                            categories = [
                                ''
                                ], 
                            cities = [
                                ''
                                ], 
                            districts = [
                                ''
                                ], 
                            brand_models = [
                                ''
                                ], ), 
                        linkage = 'POST_DETAILS', 
                        secondary_links = kenar_api_client.models.addons_addon_secondary_links.addonsAddonSecondaryLinks(
                            secondary_linkages = [
                                kenar_api_client.models.addons_addon_secondary_linkage.addonsAddonSecondaryLinkage(
                                    position = 'POST_SPEC_HEAD', )
                                ], ), 
                        semantic = {
                            'key' : ''
                            }, 
                        semantic_data = kenar_api_client.models.addons_addon_semantic.addonsAddonSemantic(
                            payment_method = 'SECURE', 
                            identity_verification_result = 'FACE_AND_ID_MATCHED', 
                            post_verification_result = 'POST_INFORMATION_MATCHED', 
                            identity_verification_last_successful_stage = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                            identity_verification_failure_reason = 'IDENTITYVERIFICATIONSTAGE_NOT_STARTED', 
                            car_verification_last_successful_stage = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                            car_verification_failure_reason = 'CARVERIFICATIONSTAGE_NOT_STARTED', 
                            ownership_result = 'OWNERSHIP_CONFIRMED', 
                            inspection_result = 'INSPECTION_APPROVED', 
                            new_face_verification_result = 'NEW_FACE_VERIFICATION_FAILED', ), 
                        sensitive_semantic = {
                            'key' : ''
                            }, 
                        widgets_semantic = kenar_api_client.models.widgets_semantic.widgets_semantic(), 
                        semantic_sensitives = [
                            ''
                            ], )
                    ]
            )
        else:
            return AddonsGetUserPostAddonsResponse(
        )
        """

    def testAddonsGetUserPostAddonsResponse(self):
        """Test AddonsGetUserPostAddonsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

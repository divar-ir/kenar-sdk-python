# coding: utf-8

"""
    divar_interface/open_platform/chatapi/chatapi.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.finder_post_ext_state import FinderPostExtState
from kenar_api_client.models.get_post_response_business_data import GetPostResponseBusinessData
from typing import Optional, Set
from typing_extensions import Self

class FinderGetPostResponse(BaseModel):
    """
    FinderGetPostResponse
    """ # noqa: E501
    state: Optional[FinderPostExtState] = None
    first_published_at: Optional[datetime] = None
    token: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    district: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = None
    chat_enabled: Optional[StrictBool] = None
    business_data: Optional[GetPostResponseBusinessData] = None
    __properties: ClassVar[List[str]] = ["state", "first_published_at", "token", "category", "city", "district", "data", "chat_enabled", "business_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinderGetPostResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_data
        if self.business_data:
            _dict['business_data'] = self.business_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinderGetPostResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "first_published_at": obj.get("first_published_at"),
            "token": obj.get("token"),
            "category": obj.get("category"),
            "city": obj.get("city"),
            "district": obj.get("district"),
            "data": obj.get("data"),
            "chat_enabled": obj.get("chat_enabled"),
            "business_data": GetPostResponseBusinessData.from_dict(obj["business_data"]) if obj.get("business_data") is not None else None
        })
        return _obj



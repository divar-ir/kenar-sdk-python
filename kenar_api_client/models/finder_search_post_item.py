# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.search_post_item_price import SearchPostItemPrice
from kenar_api_client.models.search_post_item_real_estate_fields import SearchPostItemRealEstateFields
from kenar_api_client.models.search_post_item_vehicles_fields import SearchPostItemVehiclesFields
from typing import Optional, Set
from typing_extensions import Self

class FinderSearchPostItem(BaseModel):
    """
    FinderSearchPostItem
    """ # noqa: E501
    category: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    community_fields: Optional[Dict[str, Any]] = None
    electronic_devices_fields: Optional[Dict[str, Any]] = None
    home_kitchen_fields: Optional[Dict[str, Any]] = None
    jobs_fields: Optional[Dict[str, Any]] = None
    last_modified_at: Optional[datetime] = None
    leisure_hobbies_fields: Optional[Dict[str, Any]] = None
    personal_goods_fields: Optional[Dict[str, Any]] = None
    price: Optional[SearchPostItemPrice] = None
    real_estate_fields: Optional[SearchPostItemRealEstateFields] = None
    services_fields: Optional[Dict[str, Any]] = None
    title: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    tools_materials_equipment_fields: Optional[Dict[str, Any]] = None
    vehicles_fields: Optional[SearchPostItemVehiclesFields] = None
    __properties: ClassVar[List[str]] = ["category", "city", "community_fields", "electronic_devices_fields", "home_kitchen_fields", "jobs_fields", "last_modified_at", "leisure_hobbies_fields", "personal_goods_fields", "price", "real_estate_fields", "services_fields", "title", "token", "tools_materials_equipment_fields", "vehicles_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinderSearchPostItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of real_estate_fields
        if self.real_estate_fields:
            _dict['real_estate_fields'] = self.real_estate_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicles_fields
        if self.vehicles_fields:
            _dict['vehicles_fields'] = self.vehicles_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinderSearchPostItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "city": obj.get("city"),
            "community_fields": obj.get("community_fields"),
            "electronic_devices_fields": obj.get("electronic_devices_fields"),
            "home_kitchen_fields": obj.get("home_kitchen_fields"),
            "jobs_fields": obj.get("jobs_fields"),
            "last_modified_at": obj.get("last_modified_at"),
            "leisure_hobbies_fields": obj.get("leisure_hobbies_fields"),
            "personal_goods_fields": obj.get("personal_goods_fields"),
            "price": SearchPostItemPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "real_estate_fields": SearchPostItemRealEstateFields.from_dict(obj["real_estate_fields"]) if obj.get("real_estate_fields") is not None else None,
            "services_fields": obj.get("services_fields"),
            "title": obj.get("title"),
            "token": obj.get("token"),
            "tools_materials_equipment_fields": obj.get("tools_materials_equipment_fields"),
            "vehicles_fields": SearchPostItemVehiclesFields.from_dict(obj["vehicles_fields"]) if obj.get("vehicles_fields") is not None else None
        })
        return _obj



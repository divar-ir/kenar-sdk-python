# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.chatapi_conversation import ChatapiConversation
from kenar_api_client.models.chatapi_message_type import ChatapiMessageType
from kenar_api_client.models.message_file_data import MessageFileData
from kenar_api_client.models.message_image_data import MessageImageData
from kenar_api_client.models.message_location_data import MessageLocationData
from kenar_api_client.models.message_sender import MessageSender
from kenar_api_client.models.message_video_data import MessageVideoData
from kenar_api_client.models.message_voice_data import MessageVoiceData
from typing import Optional, Set
from typing_extensions import Self

class ChatapiMessage(BaseModel):
    """
    ChatapiMessage
    """ # noqa: E501
    id: Optional[StrictStr] = None
    conversation: Optional[ChatapiConversation] = None
    sender: Optional[MessageSender] = None
    type: Optional[ChatapiMessageType] = None
    sent_at: Optional[datetime] = None
    text: Optional[StrictStr] = None
    image_data: Optional[MessageImageData] = None
    file_data: Optional[MessageFileData] = None
    voice_data: Optional[MessageVoiceData] = None
    location_data: Optional[MessageLocationData] = None
    video_data: Optional[MessageVideoData] = None
    __properties: ClassVar[List[str]] = ["id", "conversation", "sender", "type", "sent_at", "text", "image_data", "file_data", "voice_data", "location_data", "video_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatapiMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_data
        if self.image_data:
            _dict['image_data'] = self.image_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_data
        if self.file_data:
            _dict['file_data'] = self.file_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_data
        if self.voice_data:
            _dict['voice_data'] = self.voice_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_data
        if self.location_data:
            _dict['location_data'] = self.location_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_data
        if self.video_data:
            _dict['video_data'] = self.video_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatapiMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "conversation": ChatapiConversation.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "sender": MessageSender.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "type": obj.get("type"),
            "sent_at": obj.get("sent_at"),
            "text": obj.get("text"),
            "image_data": MessageImageData.from_dict(obj["image_data"]) if obj.get("image_data") is not None else None,
            "file_data": MessageFileData.from_dict(obj["file_data"]) if obj.get("file_data") is not None else None,
            "voice_data": MessageVoiceData.from_dict(obj["voice_data"]) if obj.get("voice_data") is not None else None,
            "location_data": MessageLocationData.from_dict(obj["location_data"]) if obj.get("location_data") is not None else None,
            "video_data": MessageVideoData.from_dict(obj["video_data"]) if obj.get("video_data") is not None else None
        })
        return _obj



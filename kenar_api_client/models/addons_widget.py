# coding: utf-8

"""
    divar_interface/open_platform/chatapi/chatapi.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.addons_button_bar import AddonsButtonBar
from kenar_api_client.models.addons_description_row import AddonsDescriptionRow
from kenar_api_client.models.addons_evaluation_row import AddonsEvaluationRow
from kenar_api_client.models.addons_event_row import AddonsEventRow
from kenar_api_client.models.addons_group_info_row import AddonsGroupInfoRow
from kenar_api_client.models.addons_image_carousel_row import AddonsImageCarouselRow
from kenar_api_client.models.addons_score_row import AddonsScoreRow
from kenar_api_client.models.addons_selector_row import AddonsSelectorRow
from kenar_api_client.models.addons_subtitle_row import AddonsSubtitleRow
from kenar_api_client.models.addons_title_row import AddonsTitleRow
from typing import Optional, Set
from typing_extensions import Self

class AddonsWidget(BaseModel):
    """
    AddonsWidget
    """ # noqa: E501
    event_row: Optional[AddonsEventRow] = None
    button_bar: Optional[AddonsButtonBar] = None
    title_row: Optional[AddonsTitleRow] = None
    subtitle_row: Optional[AddonsSubtitleRow] = None
    selector_row: Optional[AddonsSelectorRow] = None
    score_row: Optional[AddonsScoreRow] = None
    image_carousel_row: Optional[AddonsImageCarouselRow] = None
    group_info_row: Optional[AddonsGroupInfoRow] = None
    evaluation_row: Optional[AddonsEvaluationRow] = None
    description_row: Optional[AddonsDescriptionRow] = None
    semantic_paths: Optional[Dict[str, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["event_row", "button_bar", "title_row", "subtitle_row", "selector_row", "score_row", "image_carousel_row", "group_info_row", "evaluation_row", "description_row", "semantic_paths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddonsWidget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_row
        if self.event_row:
            _dict['event_row'] = self.event_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of button_bar
        if self.button_bar:
            _dict['button_bar'] = self.button_bar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title_row
        if self.title_row:
            _dict['title_row'] = self.title_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subtitle_row
        if self.subtitle_row:
            _dict['subtitle_row'] = self.subtitle_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selector_row
        if self.selector_row:
            _dict['selector_row'] = self.selector_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of score_row
        if self.score_row:
            _dict['score_row'] = self.score_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_carousel_row
        if self.image_carousel_row:
            _dict['image_carousel_row'] = self.image_carousel_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_info_row
        if self.group_info_row:
            _dict['group_info_row'] = self.group_info_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evaluation_row
        if self.evaluation_row:
            _dict['evaluation_row'] = self.evaluation_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description_row
        if self.description_row:
            _dict['description_row'] = self.description_row.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddonsWidget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_row": AddonsEventRow.from_dict(obj["event_row"]) if obj.get("event_row") is not None else None,
            "button_bar": AddonsButtonBar.from_dict(obj["button_bar"]) if obj.get("button_bar") is not None else None,
            "title_row": AddonsTitleRow.from_dict(obj["title_row"]) if obj.get("title_row") is not None else None,
            "subtitle_row": AddonsSubtitleRow.from_dict(obj["subtitle_row"]) if obj.get("subtitle_row") is not None else None,
            "selector_row": AddonsSelectorRow.from_dict(obj["selector_row"]) if obj.get("selector_row") is not None else None,
            "score_row": AddonsScoreRow.from_dict(obj["score_row"]) if obj.get("score_row") is not None else None,
            "image_carousel_row": AddonsImageCarouselRow.from_dict(obj["image_carousel_row"]) if obj.get("image_carousel_row") is not None else None,
            "group_info_row": AddonsGroupInfoRow.from_dict(obj["group_info_row"]) if obj.get("group_info_row") is not None else None,
            "evaluation_row": AddonsEvaluationRow.from_dict(obj["evaluation_row"]) if obj.get("evaluation_row") is not None else None,
            "description_row": AddonsDescriptionRow.from_dict(obj["description_row"]) if obj.get("description_row") is not None else None,
            "semantic_paths": obj.get("semantic_paths")
        })
        return _obj



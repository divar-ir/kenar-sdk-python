# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.post_services_fields_category import PostServicesFieldsCategory
from typing import Optional, Set
from typing_extensions import Self

class OpenPlatformpostServicesFields(BaseModel):
    """
    OpenPlatformpostServicesFields
    """ # noqa: E501
    category: Optional[PostServicesFieldsCategory] = None
    expertise_ids: Optional[List[StrictStr]] = Field(default=None, description="List of expertise ids")
    work_hours_end: Optional[StrictInt] = Field(default=None, description="End hour of work in 24-hour format (e.g. 18 for 18:00). Only applicable if `works_24_7` is false.")
    work_hours_start: Optional[StrictInt] = Field(default=None, description="Start hour of work in 24-hour format (e.g. 9 for 9:00). Only applicable if `works_24_7` is false.")
    work_on_holidays: Optional[StrictBool] = Field(default=None, description="Whether the service provider works on holidays")
    works_24_7: Optional[StrictBool] = Field(default=None, description="Whether the service provider is available 24/7. If true, `work_hours_start` and `work_hours_end` are ignored.")
    __properties: ClassVar[List[str]] = ["category", "expertise_ids", "work_hours_end", "work_hours_start", "work_on_holidays", "works_24_7"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenPlatformpostServicesFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenPlatformpostServicesFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "expertise_ids": obj.get("expertise_ids"),
            "work_hours_end": obj.get("work_hours_end"),
            "work_hours_start": obj.get("work_hours_start"),
            "work_on_holidays": obj.get("work_on_holidays"),
            "works_24_7": obj.get("works_24_7")
        })
        return _obj



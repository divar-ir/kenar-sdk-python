# coding: utf-8

"""
    divar_interface/open_platform/chatapi/chatapi.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.search_post_item_price import SearchPostItemPrice
from typing import Optional, Set
from typing_extensions import Self

class SearchPostItemRealEstateFields(BaseModel):
    """
    SearchPostItemRealEstateFields
    """ # noqa: E501
    credit: Optional[SearchPostItemPrice] = None
    rent: Optional[SearchPostItemPrice] = None
    daily_rent: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    year: Optional[StrictInt] = None
    has_parking: Optional[StrictBool] = None
    has_elevator: Optional[StrictBool] = None
    rooms: Optional[StrictStr] = None
    floor: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["credit", "rent", "daily_rent", "size", "year", "has_parking", "has_elevator", "rooms", "floor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchPostItemRealEstateFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit
        if self.credit:
            _dict['credit'] = self.credit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rent
        if self.rent:
            _dict['rent'] = self.rent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchPostItemRealEstateFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credit": SearchPostItemPrice.from_dict(obj["credit"]) if obj.get("credit") is not None else None,
            "rent": SearchPostItemPrice.from_dict(obj["rent"]) if obj.get("rent") is not None else None,
            "daily_rent": obj.get("daily_rent"),
            "size": obj.get("size"),
            "year": obj.get("year"),
            "has_parking": obj.get("has_parking"),
            "has_elevator": obj.get("has_elevator"),
            "rooms": obj.get("rooms"),
            "floor": obj.get("floor")
        })
        return _obj



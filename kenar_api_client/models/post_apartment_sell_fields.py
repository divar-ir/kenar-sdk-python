# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from kenar_api_client.models.post_rooms_count import PostRoomsCount
from typing import Optional, Set
from typing_extensions import Self

class PostApartmentSellFields(BaseModel):
    """
    PostApartmentSellFields
    """ # noqa: E501
    floor: StrictInt = Field(description="طبقه ملک. از -1 برای زیرزمین و 0 برای همکف استفاده کنید. از 1 برای طبقه اول و غیره.")
    has_elevator: StrictBool = Field(description="آیا ملک آسانسور دارد")
    has_own_image: StrictBool = Field(description="تصاویر مربوط به خود ملک بوده و تزئینی نیستند.")
    has_parking: StrictBool = Field(description="آیا ملک پارکینگ دارد")
    has_warehouse: StrictBool = Field(description="آیا ملک انباری دارد")
    price: StrictStr = Field(description="قیمت ملک به تومان")
    rooms_count: PostRoomsCount
    size: StrictInt = Field(description="مساحت ملک بر حسب متر مربع")
    year_built: StrictInt = Field(description="سال ساخت ملک (تقویم شمسی)")
    __properties: ClassVar[List[str]] = ["floor", "has_elevator", "has_own_image", "has_parking", "has_warehouse", "price", "rooms_count", "size", "year_built"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostApartmentSellFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostApartmentSellFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "floor": obj.get("floor"),
            "has_elevator": obj.get("has_elevator"),
            "has_own_image": obj.get("has_own_image"),
            "has_parking": obj.get("has_parking"),
            "has_warehouse": obj.get("has_warehouse"),
            "price": obj.get("price"),
            "rooms_count": obj.get("rooms_count"),
            "size": obj.get("size"),
            "year_built": obj.get("year_built")
        })
        return _obj



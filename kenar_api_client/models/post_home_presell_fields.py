# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.home_presell_fields_construction_phase import HomePresellFieldsConstructionPhase
from kenar_api_client.models.home_presell_fields_delivery_month import HomePresellFieldsDeliveryMonth
from kenar_api_client.models.home_presell_fields_delivery_year import HomePresellFieldsDeliveryYear
from kenar_api_client.models.home_presell_fields_unit_type import HomePresellFieldsUnitType
from typing import Optional, Set
from typing_extensions import Self

class PostHomePresellFields(BaseModel):
    """
    PostHomePresellFields
    """ # noqa: E501
    base_price_per_square_meter: Optional[StrictStr] = Field(default=None, description="Base price per square meter in Toman")
    construction_phase: Optional[HomePresellFieldsConstructionPhase] = None
    delivery_month: Optional[HomePresellFieldsDeliveryMonth] = None
    delivery_payment_percentage: Optional[StrictInt] = Field(default=None, description="Payment percentage required upon delivery")
    delivery_year: Optional[HomePresellFieldsDeliveryYear] = None
    developer_company_name: Optional[StrictStr] = Field(default=None, description="Name of the developer company")
    down_payment_percentage: Optional[StrictInt] = Field(default=None, description="Down payment percentage required")
    has_own_image: StrictBool = Field(description="تصاویر مربوط به خود ملک بوده و تزئینی نیستند.")
    min_unit_size: Optional[StrictInt] = Field(default=None, description="Minimum unit size in square meters")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the home presell project")
    project_physical_progress_percentage: Optional[StrictInt] = Field(default=None, description="Physical progress percentage of the project")
    unit_types_offered: Optional[List[HomePresellFieldsUnitType]] = Field(default=None, description="List of unit types offered in the project")
    __properties: ClassVar[List[str]] = ["base_price_per_square_meter", "construction_phase", "delivery_month", "delivery_payment_percentage", "delivery_year", "developer_company_name", "down_payment_percentage", "has_own_image", "min_unit_size", "project_name", "project_physical_progress_percentage", "unit_types_offered"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostHomePresellFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostHomePresellFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_price_per_square_meter": obj.get("base_price_per_square_meter"),
            "construction_phase": obj.get("construction_phase"),
            "delivery_month": obj.get("delivery_month"),
            "delivery_payment_percentage": obj.get("delivery_payment_percentage"),
            "delivery_year": obj.get("delivery_year"),
            "developer_company_name": obj.get("developer_company_name"),
            "down_payment_percentage": obj.get("down_payment_percentage"),
            "has_own_image": obj.get("has_own_image"),
            "min_unit_size": obj.get("min_unit_size"),
            "project_name": obj.get("project_name"),
            "project_physical_progress_percentage": obj.get("project_physical_progress_percentage"),
            "unit_types_offered": obj.get("unit_types_offered")
        })
        return _obj



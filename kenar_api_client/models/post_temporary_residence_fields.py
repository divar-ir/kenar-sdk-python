# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kenar_api_client.models.temporary_residence_fields_rooms_count import TemporaryResidenceFieldsRoomsCount
from typing import Optional, Set
from typing_extensions import Self

class PostTemporaryResidenceFields(BaseModel):
    """
    PostTemporaryResidenceFields
    """ # noqa: E501
    area: Optional[StrictInt] = Field(default=None, description="Area of the residence in square meters")
    extra_person_capacity: Optional[StrictInt] = Field(default=None, description="Number of allowed extra people that can stay in the residence")
    has_own_image: Optional[StrictBool] = Field(default=None, description="Whether the images are of the property itself and not decorative/stock photos.")
    price_cost_per_extra_person: Optional[StrictStr] = Field(default=None, description="Cost per extra person per night in Rial")
    price_regular_days: Optional[StrictStr] = Field(default=None, description="Price of the residence for regular days (Saturday to Tuesday) in Rial")
    price_special_days: Optional[StrictStr] = Field(default=None, description="Price of the residence for special days (holidays and occasions) in Rial")
    price_weekends: Optional[StrictStr] = Field(default=None, description="Price of the residence for weekends (Wednesday to Friday) in Rial")
    regular_person_capacity: Optional[StrictInt] = Field(default=None, description="Number of allowed regular people that can stay in the residence")
    rooms_count: Optional[TemporaryResidenceFieldsRoomsCount] = None
    __properties: ClassVar[List[str]] = ["area", "extra_person_capacity", "has_own_image", "price_cost_per_extra_person", "price_regular_days", "price_special_days", "price_weekends", "regular_person_capacity", "rooms_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostTemporaryResidenceFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostTemporaryResidenceFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": obj.get("area"),
            "extra_person_capacity": obj.get("extra_person_capacity"),
            "has_own_image": obj.get("has_own_image"),
            "price_cost_per_extra_person": obj.get("price_cost_per_extra_person"),
            "price_regular_days": obj.get("price_regular_days"),
            "price_special_days": obj.get("price_special_days"),
            "price_weekends": obj.get("price_weekends"),
            "regular_person_capacity": obj.get("regular_person_capacity"),
            "rooms_count": obj.get("rooms_count")
        })
        return _obj



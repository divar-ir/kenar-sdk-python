# coding: utf-8

"""
    Kenar API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from kenar_api_client.models.events_register_event_subscription_request import EventsRegisterEventSubscriptionRequest

from kenar_api_client.api_client import ApiClient, RequestSerialized
from kenar_api_client.api_response import ApiResponse
from kenar_api_client.rest import RESTResponseType


class EventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def events_register_event_subscription(
        self,
        events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """اشتراک در رویداد

        این درخواست به شما امکان اشتراک در رویداد را می‌دهد. باید access-token را در این API ارسال کنید تا دسترسی شما بررسی شود. برای اشتراک در `NEW_MESSAGE_ON_POST` به یکی از این دامنه‌ها نیاز دارید: - CHAT_POST_CONVERSATIONS_READ.{post_token} - CHAT_SUPPLIER_ALL_CONVERSATIONS_READ برای اشتراک در `POST_UPDATE` به دامنه `USER_POSTS_GET` نیاز دارید. پس از فراخوانی این API، هنگام وقوع رویداد مربوطه در webhook خود مطلع خواهید شد. مطمئن شوید URL webhook در پنل ارائه‌دهندگان برای اپلیکیشن شما تنظیم شده است. برخی رویدادها به طور پیش‌فرض فعال هستند و نیازی به اشتراک ندارند (مثل پیام‌های chatbot).

        :param events_register_event_subscription_request: (required)
        :type events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_register_event_subscription_serialize(
            events_register_event_subscription_request=events_register_event_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def events_register_event_subscription_with_http_info(
        self,
        events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """اشتراک در رویداد

        این درخواست به شما امکان اشتراک در رویداد را می‌دهد. باید access-token را در این API ارسال کنید تا دسترسی شما بررسی شود. برای اشتراک در `NEW_MESSAGE_ON_POST` به یکی از این دامنه‌ها نیاز دارید: - CHAT_POST_CONVERSATIONS_READ.{post_token} - CHAT_SUPPLIER_ALL_CONVERSATIONS_READ برای اشتراک در `POST_UPDATE` به دامنه `USER_POSTS_GET` نیاز دارید. پس از فراخوانی این API، هنگام وقوع رویداد مربوطه در webhook خود مطلع خواهید شد. مطمئن شوید URL webhook در پنل ارائه‌دهندگان برای اپلیکیشن شما تنظیم شده است. برخی رویدادها به طور پیش‌فرض فعال هستند و نیازی به اشتراک ندارند (مثل پیام‌های chatbot).

        :param events_register_event_subscription_request: (required)
        :type events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_register_event_subscription_serialize(
            events_register_event_subscription_request=events_register_event_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def events_register_event_subscription_without_preload_content(
        self,
        events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """اشتراک در رویداد

        این درخواست به شما امکان اشتراک در رویداد را می‌دهد. باید access-token را در این API ارسال کنید تا دسترسی شما بررسی شود. برای اشتراک در `NEW_MESSAGE_ON_POST` به یکی از این دامنه‌ها نیاز دارید: - CHAT_POST_CONVERSATIONS_READ.{post_token} - CHAT_SUPPLIER_ALL_CONVERSATIONS_READ برای اشتراک در `POST_UPDATE` به دامنه `USER_POSTS_GET` نیاز دارید. پس از فراخوانی این API، هنگام وقوع رویداد مربوطه در webhook خود مطلع خواهید شد. مطمئن شوید URL webhook در پنل ارائه‌دهندگان برای اپلیکیشن شما تنظیم شده است. برخی رویدادها به طور پیش‌فرض فعال هستند و نیازی به اشتراک ندارند (مثل پیام‌های chatbot).

        :param events_register_event_subscription_request: (required)
        :type events_register_event_subscription_request: EventsRegisterEventSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_register_event_subscription_serialize(
            events_register_event_subscription_request=events_register_event_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _events_register_event_subscription_serialize(
        self,
        events_register_event_subscription_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if events_register_event_subscription_request is not None:
            _body_params = events_register_event_subscription_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/open-platform/events/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def events_send_event(
        self,
        primary_button_action_open_post_page_post_token: Annotated[StrictStr, Field(description="Token of the post to open")],
        primary_button_action_open_post_manage_page_post_token: Annotated[StrictStr, Field(description="Token of the post to redirect to its management page")],
        message: Annotated[Optional[StrictStr], Field(description="The event message to display to the user")] = None,
        primary_button_title: Annotated[Optional[StrictStr], Field(description="The text to display on the button")] = None,
        primary_button_action_open_direct_link: Annotated[Optional[StrictStr], Field(description="An action to send user to your URL directly with just a resource id (if applicable)")] = None,
        primary_button_action_open_server_link_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        primary_button_action_get_dynamic_action_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        target_type: Annotated[Optional[StrictStr], Field(description="Target of the event; USER or POST")] = None,
        target_resource_id: Annotated[Optional[StrictStr], Field(description="id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Send an event to a user

        Using this API, you can send an event to a user. The event can be specific to a post or general. The event can include buttons with custom actions allowing users to interact with your app.

        :param primary_button_action_open_post_page_post_token: Token of the post to open (required)
        :type primary_button_action_open_post_page_post_token: str
        :param primary_button_action_open_post_manage_page_post_token: Token of the post to redirect to its management page (required)
        :type primary_button_action_open_post_manage_page_post_token: str
        :param message: The event message to display to the user
        :type message: str
        :param primary_button_title: The text to display on the button
        :type primary_button_title: str
        :param primary_button_action_open_direct_link: An action to send user to your URL directly with just a resource id (if applicable)
        :type primary_button_action_open_direct_link: str
        :param primary_button_action_open_server_link_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_open_server_link_data: object
        :param primary_button_action_get_dynamic_action_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_get_dynamic_action_data: object
        :param target_type: Target of the event; USER or POST
        :type target_type: str
        :param target_resource_id: id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. 
        :type target_resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_send_event_serialize(
            primary_button_action_open_post_page_post_token=primary_button_action_open_post_page_post_token,
            primary_button_action_open_post_manage_page_post_token=primary_button_action_open_post_manage_page_post_token,
            message=message,
            primary_button_title=primary_button_title,
            primary_button_action_open_direct_link=primary_button_action_open_direct_link,
            primary_button_action_open_server_link_data=primary_button_action_open_server_link_data,
            primary_button_action_get_dynamic_action_data=primary_button_action_get_dynamic_action_data,
            target_type=target_type,
            target_resource_id=target_resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def events_send_event_with_http_info(
        self,
        primary_button_action_open_post_page_post_token: Annotated[StrictStr, Field(description="Token of the post to open")],
        primary_button_action_open_post_manage_page_post_token: Annotated[StrictStr, Field(description="Token of the post to redirect to its management page")],
        message: Annotated[Optional[StrictStr], Field(description="The event message to display to the user")] = None,
        primary_button_title: Annotated[Optional[StrictStr], Field(description="The text to display on the button")] = None,
        primary_button_action_open_direct_link: Annotated[Optional[StrictStr], Field(description="An action to send user to your URL directly with just a resource id (if applicable)")] = None,
        primary_button_action_open_server_link_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        primary_button_action_get_dynamic_action_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        target_type: Annotated[Optional[StrictStr], Field(description="Target of the event; USER or POST")] = None,
        target_resource_id: Annotated[Optional[StrictStr], Field(description="id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Send an event to a user

        Using this API, you can send an event to a user. The event can be specific to a post or general. The event can include buttons with custom actions allowing users to interact with your app.

        :param primary_button_action_open_post_page_post_token: Token of the post to open (required)
        :type primary_button_action_open_post_page_post_token: str
        :param primary_button_action_open_post_manage_page_post_token: Token of the post to redirect to its management page (required)
        :type primary_button_action_open_post_manage_page_post_token: str
        :param message: The event message to display to the user
        :type message: str
        :param primary_button_title: The text to display on the button
        :type primary_button_title: str
        :param primary_button_action_open_direct_link: An action to send user to your URL directly with just a resource id (if applicable)
        :type primary_button_action_open_direct_link: str
        :param primary_button_action_open_server_link_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_open_server_link_data: object
        :param primary_button_action_get_dynamic_action_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_get_dynamic_action_data: object
        :param target_type: Target of the event; USER or POST
        :type target_type: str
        :param target_resource_id: id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. 
        :type target_resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_send_event_serialize(
            primary_button_action_open_post_page_post_token=primary_button_action_open_post_page_post_token,
            primary_button_action_open_post_manage_page_post_token=primary_button_action_open_post_manage_page_post_token,
            message=message,
            primary_button_title=primary_button_title,
            primary_button_action_open_direct_link=primary_button_action_open_direct_link,
            primary_button_action_open_server_link_data=primary_button_action_open_server_link_data,
            primary_button_action_get_dynamic_action_data=primary_button_action_get_dynamic_action_data,
            target_type=target_type,
            target_resource_id=target_resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def events_send_event_without_preload_content(
        self,
        primary_button_action_open_post_page_post_token: Annotated[StrictStr, Field(description="Token of the post to open")],
        primary_button_action_open_post_manage_page_post_token: Annotated[StrictStr, Field(description="Token of the post to redirect to its management page")],
        message: Annotated[Optional[StrictStr], Field(description="The event message to display to the user")] = None,
        primary_button_title: Annotated[Optional[StrictStr], Field(description="The text to display on the button")] = None,
        primary_button_action_open_direct_link: Annotated[Optional[StrictStr], Field(description="An action to send user to your URL directly with just a resource id (if applicable)")] = None,
        primary_button_action_open_server_link_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        primary_button_action_get_dynamic_action_data: Annotated[Optional[Dict[str, Any]], Field(description="A data that you can set and will be returned to you upon user click to recognize the action")] = None,
        target_type: Annotated[Optional[StrictStr], Field(description="Target of the event; USER or POST")] = None,
        target_resource_id: Annotated[Optional[StrictStr], Field(description="id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send an event to a user

        Using this API, you can send an event to a user. The event can be specific to a post or general. The event can include buttons with custom actions allowing users to interact with your app.

        :param primary_button_action_open_post_page_post_token: Token of the post to open (required)
        :type primary_button_action_open_post_page_post_token: str
        :param primary_button_action_open_post_manage_page_post_token: Token of the post to redirect to its management page (required)
        :type primary_button_action_open_post_manage_page_post_token: str
        :param message: The event message to display to the user
        :type message: str
        :param primary_button_title: The text to display on the button
        :type primary_button_title: str
        :param primary_button_action_open_direct_link: An action to send user to your URL directly with just a resource id (if applicable)
        :type primary_button_action_open_direct_link: str
        :param primary_button_action_open_server_link_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_open_server_link_data: object
        :param primary_button_action_get_dynamic_action_data: A data that you can set and will be returned to you upon user click to recognize the action
        :type primary_button_action_get_dynamic_action_data: object
        :param target_type: Target of the event; USER or POST
        :type target_type: str
        :param target_resource_id: id of the target. When target type is USER, it should be the Divar User ID of that user and when target type is POST, it should be the post token. 
        :type target_resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_send_event_serialize(
            primary_button_action_open_post_page_post_token=primary_button_action_open_post_page_post_token,
            primary_button_action_open_post_manage_page_post_token=primary_button_action_open_post_manage_page_post_token,
            message=message,
            primary_button_title=primary_button_title,
            primary_button_action_open_direct_link=primary_button_action_open_direct_link,
            primary_button_action_open_server_link_data=primary_button_action_open_server_link_data,
            primary_button_action_get_dynamic_action_data=primary_button_action_get_dynamic_action_data,
            target_type=target_type,
            target_resource_id=target_resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _events_send_event_serialize(
        self,
        primary_button_action_open_post_page_post_token,
        primary_button_action_open_post_manage_page_post_token,
        message,
        primary_button_title,
        primary_button_action_open_direct_link,
        primary_button_action_open_server_link_data,
        primary_button_action_get_dynamic_action_data,
        target_type,
        target_resource_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if message is not None:
            
            _query_params.append(('message', message))
            
        if primary_button_title is not None:
            
            _query_params.append(('primary_button.title', primary_button_title))
            
        if primary_button_action_open_direct_link is not None:
            
            _query_params.append(('primary_button.action.open_direct_link', primary_button_action_open_direct_link))
            
        if primary_button_action_open_server_link_data is not None:
            
            _query_params.append(('primary_button.action.open_server_link.data', primary_button_action_open_server_link_data))
            
        if primary_button_action_get_dynamic_action_data is not None:
            
            _query_params.append(('primary_button.action.get_dynamic_action.data', primary_button_action_get_dynamic_action_data))
            
        if primary_button_action_open_post_page_post_token is not None:
            
            _query_params.append(('primary_button.action.open_post_page.post_token', primary_button_action_open_post_page_post_token))
            
        if primary_button_action_open_post_manage_page_post_token is not None:
            
            _query_params.append(('primary_button.action.open_post_manage_page.post_token', primary_button_action_open_post_manage_page_post_token))
            
        if target_type is not None:
            
            _query_params.append(('target_type', target_type))
            
        if target_resource_id is not None:
            
            _query_params.append(('target_resource_id', target_resource_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/experimental/open-platform/events/send',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


